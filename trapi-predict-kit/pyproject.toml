[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
requires-python = ">=3.7"
name = "trapi-predict-kit"
description = "A package to help create and deploy Translator Reasoner APIs (TRAPI) from any prediction model exposed as a regular python function."
readme = "README.md"
license = { file = "LICENSE.txt" }
authors = [
    { name = "Vincent Emonet", email = "vincent.emonet@gmail.com" },
]
maintainers = [
    { name = "Vincent Emonet", email = "vincent.emonet@gmail.com" },
]
keywords = [
    "Python",
]
classifiers = [
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
]
dynamic = ["version"]

dependencies = [
    "requests >=2.23.0",
    # "pydantic >=1.9",
    "pydantic",
    "fastapi >=0.68.1",
    "rdflib >=6.1.1",
    "reasoner-pydantic >=3.0.1",
    "mlem",
    "dvc",
    "bmt",
    # "fairworkflows @ git+https://github.com/vemonet/fairworkflows.git",
    # "SPARQLWrapper >=2.0.0,<3.0.0",
]


[project.optional-dependencies]
opentelemetry = [
    "opentelemetry-sdk",
    "opentelemetry-exporter-otlp-proto-http",
    "opentelemetry-exporter-jaeger",
    "opentelemetry-instrumentation-fastapi",
    "opentelemetry-instrumentation-httpx",
    "opentelemetry-instrumentation-requests",
]
web = [
    "uvicorn >=0.15.0",
    "gunicorn >=20.0.4",
]
test = [
    "pytest >=7.1.3",
    "pytest-cov >=3.0.0",
    "pre-commit",
    "mypy >=0.991",
    "scikit-learn",
    "pandas",
    "httpx",
    "reasoner-validator",
    "types-requests",
]
doc = [
    "mkdocs >=1.4.2",
    "mkdocs-material >=8.2.7",
    "mkdocstrings[python] >=0.19.1",
    "mdx-include >=1.4.1",
    "mkdocs-markdownextradata-plugin >=0.2.5",
]


[project.urls]
Homepage = "https://github.com/MaastrichtU-IDS/trapi-predict-kit"
Documentation = "https://github.com/MaastrichtU-IDS/trapi-predict-kit"
History = "https://github.com/MaastrichtU-IDS/trapi-predict-kit/releases"
Tracker = "https://github.com/MaastrichtU-IDS/trapi-predict-kit/issues"
Source = "https://github.com/MaastrichtU-IDS/trapi-predict-kit"


# ENVIRONMENTS AND SCRIPTS
[tool.hatch.envs.default]
features = [
    "test",
    "web",
    "doc",
    "opentelemetry",
]
post-install-commands = [
    "pre-commit install",
]

[tool.hatch.envs.default.scripts]
dev = "uvicorn tests.dev:app --reload {args}"
fmt = [
    "pre-commit run --all --all-files",
]
test = [
    "fmt",
    "pytest {args}",
    # "mypy",
]
cov = [
    "fmt",
    "pytest --cov-report html {args}",
    "python -c 'import webbrowser; webbrowser.open(\"http://0.0.0.0:3000\")'",
    "python -m http.server 3000 --directory ./htmlcov",
]
docs = "mkdocs serve -a localhost:8001 {args}"

# TOOLS
[tool.hatch.build.targets.wheel]
packages = ["src/trapi_predict_kit"]

[tool.hatch.version]
path = "src/trapi_predict_kit/__init__.py"

# [tool.hatch.metadata]
# allow-direct-references = true


[tool.coverage.run]
source = ["src"]
branch = true

[tool.coverage.report]
omit = ["tests/*"]


[tool.mypy]
files = ["src/"]
strict = false
implicit_reexport = true
follow_imports = "normal"
ignore_missing_imports = true
pretty = true
show_column_numbers = true
warn_no_return = true
warn_unused_ignores = true
warn_redundant_casts = true
disallow_untyped_calls = true
disallow_untyped_defs = true
disallow_any_generics = false


[tool.pytest.ini_options]
addopts = [
    "-vvv",
    "--cov=src",
    "--color=yes",
    "--cov-report=term-missing",
]
filterwarnings = [
    "ignore::DeprecationWarning:httpx.*:"
]


[tool.black]
color = true
line-length = 120
target-version = ['py38']
skip-string-normalization = false


# https://github.com/charliermarsh/ruff#supported-rules
[tool.ruff]
src = ["src", "tests"]
target-version = "py38"
line-length = 120
select = [
    "I",     # isort
    "N",     # pep8-naming
    "S",     # bandit
    "A",     # flake8-builtins
    "YTT",   # flake8-2020
    "B",     # flake8-bugbear
    "C",     # flake8-comprehensions
    "ICN",   # flake8-import-conventions
    "SIM",   # flake8-simplify
    "TID",   # flake8-tidy-imports
    "Q",     # flake8-quotes
    # "FBT",   # flake8-boolean-trap
    "F",     # pyflakes
    "UP",    # pyupgrade
    "E",     # pycodestyle errors
    "W",     # pycodestyle warnings
    "PLC",   # pylint convention
    "PLE",   # pylint error
    # "PLR",   # pylint refactor Magic value used in comparison, consider replacing 400 with a constant variable
    "PLW",   # pylint warning
    "RUF",   # ruff specific
    "T",
]
ignore = [
    "E501", # line too long
    "B008", # do not perform function calls in argument defaults
    "B006", # do not use mutable data structures for argument defaults
    "C901", # too complex
    "S101", # Use of `assert` detected
    "S301", # `pickle` and modules that wrap it can be unsafe
    "T201", "T203", # remove print and pprint
    "S105", # Potential password
    "PLR0913", "PLR0912", "PLR0915", # Too many branches/statements/arguments to function call
    "A002", "A003", # Argument/Class attribute `type` is shadowing a Python builtin
]

[tool.ruff.per-file-ignores]
"__init__.py" = ["I", "F401"] # module imported but unused
