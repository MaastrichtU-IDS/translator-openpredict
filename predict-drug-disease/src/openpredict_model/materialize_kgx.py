import uuid

from kgx.sink import TsvSink
from kgx.transformer import Transformer

from openpredict_model.predict import get_predictions
from openpredict_model.utils import load_features_embeddings

# Script to materialize edges generated by the OpenPredict model using KGX
# For demo purpose
# TODO: do we need to also generate the nodes info?
# Which kgx column should we provide exactly?


def materialize_predictions(model_id="openpredict_baseline"):
    """Materialize predictions from OpenPredict in the KGX TSV format

    :return: Predictions and scores
    """
    # Get list of drugs and diseases used in the model
    (drug_df, disease_df)  = load_features_embeddings(model_id)
    drugwithfeatures = set(drug_df.columns.levels[1].tolist())
    diseaseswithfeatures = set(disease_df.columns.levels[1].tolist())
    print(f"ðŸ’Š {len(drugwithfeatures)} drugs, and {len(diseaseswithfeatures)} diseases")

    # Prepare the kgx sink
    t = Transformer()
    sink = TsvSink(
        owner=t,
        filename="./data/kgx_openpredict",
        format="tsv", # Or csv
        node_properties={"id", "name", "category"},
        edge_properties={"subject", "predicate", "object", "relation", "score"},
    )

    for drug_id in drugwithfeatures:
        drug = f"DRUGBANK:{drug_id}"
        print(f"ðŸª©ðŸ¦  Materializing predictions for drug {drug}")
        drug_predictions = get_predictions(drug, {"model_id": model_id})
        # {'id': 'OMIM:273300', 'type': 'disease', 'label': 'testicular germ cell tumor', 'score': 0.00019729476086443318},

        for predict in drug_predictions["hits"]:
            sink.write_edge({
                "id": f"urn:uuid:{uuid.uuid4()}",
                "subject": drug,
                "predicate": "biolink:treats",
                "object": predict["id"],
                "category": "biolink:ChemicalOrDrugOrTreatmentToDiseaseOrPhenotypicFeatureAssociation",
                "score": predict["score"]
                # "relation": "RO:0003304",
                # "primary_knowledge_source": "MonarchArchive:gwascatalog",
                # "publications": "PMID:26634245|PMID:26634244",
            })

    for disease_id in drugwithfeatures:
        disease = f"DRUGBANK:{disease_id}"
        print(f"ðŸª©ðŸ’Š Materializing predictions for disease {disease}")
        drug_predictions = get_predictions(disease, {"model_id": model_id})
        print(drug_predictions)

        for predict in drug_predictions["hits"]:
            sink.write_edge({
                "id": f"urn:uuid:{uuid.uuid4()}",
                "subject": disease,
                "predicate": "biolink:treated_by",
                "object": predict["id"],
                "category": "biolink:ChemicalOrDrugOrTreatmentToDiseaseOrPhenotypicFeatureAssociation",
                "score": predict["score"]
                # "relation": "RO:0003304",
                # "primary_knowledge_source": "MonarchArchive:gwascatalog",
                # "publications": "PMID:26634245|PMID:26634244",
            })

    sink.finalize()



if __name__ == '__main__':
    materialize_predictions()

# node_record = {
#     "id": "HGNC:11603",
#     "category": "biolink:NamedThing|biolink:BiologicalEntity|biolink:Gene",
#     "name": "TBX4",
#     "provided_by": "MonarchArchive:gwascatalog",
# }
# edge_record = {
#     "id": "urn:uuid:5b06e86f-d768-4cd9-ac27-abe31e95ab1e",
#     "subject": "HGNC:11603",
#     "predicate": "biolink:contributes_to",
#     "object": "MONDO:0005002",
#     "relation": "RO:0003304",
#     "primary_knowledge_source": "MonarchArchive:gwascatalog",
#     "category": "biolink:GeneToDiseaseAssociation",
#     "publications": "PMID:26634245|PMID:26634244",
# }
# sink.write_node(node_record)
# sink.write_edge(edge_record)
